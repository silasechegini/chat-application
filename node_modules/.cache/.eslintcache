[{"E:\\JScriptRepo\\chat_application\\src\\index.js":"1","E:\\JScriptRepo\\chat_application\\src\\App.js":"2","E:\\JScriptRepo\\chat_application\\src\\components\\LoginForm.jsx":"3","E:\\JScriptRepo\\chat_application\\src\\components\\ChatFeed.jsx":"4","E:\\JScriptRepo\\chat_application\\src\\components\\MyMessage.jsx":"5","E:\\JScriptRepo\\chat_application\\src\\components\\MessageForm.jsx":"6","E:\\JScriptRepo\\chat_application\\src\\components\\TheirMessage.jsx":"7"},{"size":201,"mtime":1614813395664,"results":"8","hashOfConfig":"9"},{"size":554,"mtime":1614813395661,"results":"10","hashOfConfig":"9"},{"size":2117,"mtime":1614814921371,"results":"11","hashOfConfig":"9"},{"size":2916,"mtime":1614825326679,"results":"12","hashOfConfig":"9"},{"size":558,"mtime":1614813395663,"results":"13","hashOfConfig":"9"},{"size":1851,"mtime":1614813395662,"results":"14","hashOfConfig":"9"},{"size":1222,"mtime":1614813395663,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v6o325",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\JScriptRepo\\chat_application\\src\\index.js",[],"E:\\JScriptRepo\\chat_application\\src\\App.js",[],"E:\\JScriptRepo\\chat_application\\src\\components\\LoginForm.jsx",[],"E:\\JScriptRepo\\chat_application\\src\\components\\ChatFeed.jsx",["32"],"import { useState } from 'react';\r\nimport MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\n\r\nconst ChatFeed = (props) => {\r\n\r\n    const {chats, activeChat, userName, messages} = props;\r\n\r\n    const chat = chats && chats[activeChat];\r\n\r\n    const [status, setStatus] = useState(\"\");\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => {\r\n        return chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div \r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{float: isMyMessage? 'right' : 'left', backgroundImage: `url(${person?.person?.avatar})`}}\r\n            />\r\n        ))\r\n    }\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0? null : keys[index - 1];\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return (\r\n                <div key={`msg_${index} style={{width: '100%'}}`}> \r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage \r\n                            ? <MyMessage message={message}/>\r\n                            :<TheirMessage message={message} lastMessage={messages[lastMessageKey]}/>\r\n                        }\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{marginRight: isMyMessage ? '18px' : '0', marginLeft: isMyMessage ? '0' : '68px'}}>\r\n                        {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderMessages()\r\n\r\n    if(!chat) return 'Loading... '\r\n\r\n    const handleStatus = (event) => {\r\n        let user = props.userName;\r\n        // setStatus(`${user} is typing ...`);\r\n    }\r\n\r\n    const handleKeyUp = (event) => {\r\n        setTimeout(() => {\r\n            setStatus(\"\");\r\n        }, 10000);\r\n    }\r\n\r\n    window.addEventListener('keypress', handleStatus);\r\n    window.addEventListener('keyup', handleKeyUp);\r\n\r\n    return(\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{chat?.title}</div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people.map((person) => ` ${person.person.username}`)}\r\n                </div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{ height: '100px' }} />\r\n\r\n            <div className=\"message-form-container\">\r\n                <p>{status}</p>\r\n                <MessageForm {...props} chatId={activeChat} onStatus={handleStatus} status={status}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatFeed;","E:\\JScriptRepo\\chat_application\\src\\components\\MyMessage.jsx",[],"E:\\JScriptRepo\\chat_application\\src\\components\\MessageForm.jsx",["33"],"import {useState} from 'react';\r\nimport {sendMessage, isTyping} from 'react-chat-engine';\r\nimport {SendOutlined, PictureOutlined } from '@ant-design/icons';\r\n\r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState('');\r\n    const {chatId, creds, userName} = props;\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n\r\n        if(text.length > 0) sendMessage(creds, chatId, {text});\r\n\r\n        setValue(' ');\r\n\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n        isTyping(props, chatId);\r\n    }\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, {files: event.target.files, text: ''})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>{props.status}</p>\r\n            <form className=\"message-form\" onSubmit={handleSubmit}>\r\n                <input \r\n                    className=\"message-input\"\r\n                    placeholder=\"send a message\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    onSubmit={handleSubmit}\r\n                />\r\n\r\n                <label htmlFor=\"upload-button\">\r\n                    <span className=\"image-button\">\r\n                        <PictureOutlined className=\"picture-icon\" />\r\n                    </span>\r\n                </label>\r\n                <input \r\n                    type=\"file\"\r\n                    multiple={false}\r\n                    id=\"upload-button\"\r\n                    style={{display: 'none'}}\r\n                    onChange={handleUpload}\r\n                />\r\n\r\n                <button type=\"submit\" className=\"send-button\">\r\n                    <SendOutlined className=\"send-icon\" />\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageForm;","E:\\JScriptRepo\\chat_application\\src\\components\\TheirMessage.jsx",[],{"ruleId":"34","severity":1,"message":"35","line":55,"column":13,"nodeType":"36","messageId":"37","endLine":55,"endColumn":17},{"ruleId":"34","severity":1,"message":"38","line":7,"column":27,"nodeType":"36","messageId":"37","endLine":7,"endColumn":35},"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'userName' is assigned a value but never used."]